#!/bin/bash

# Switch to other GeoQuest Variant

if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters - just specify product name."
	exit 1
fi

# Set basic variables:
if [ ! -d "$PROJECT_BASE_DIR" ]; then
  echo "Need to set PROJECT_BASE_DIR environment variable to your GQ Android project!"
fi

# ${PROJECT_BASE_DIR:?"Need to set PROJECT_BASE_DIR environment variable!"}

baseDir=${PROJECT_BASE_DIR}/GQ_Android/
testDir=${PROJECT_BASE_DIR}/GQ_Android_Tests_Robolectric/
productDir=${baseDir}products/$1/

if ! [[ -d $baseDir && -r  $baseDir && -w  $baseDir && -x $baseDir ]]; then
    echo "Base directory not usable."
	exit 1
else
	echo "Base directory ok"
fi


if ! [[ -d $productDir && -r  $productDir && -w  $productDir && -x $productDir ]]; then
    echo "Product directory not usable."
	exit 1
else
	echo "Product found"
fi
	

# Delete included directory in assets first, sinde this should not be kept:

rm -rf ${baseDir}assets/included/ || {
	echo "Could not remove include directory."
	exit 1
}


# Copy resources in place, i.e. logos, name etc.

# first we copy from the product defaults:

cp -r ${baseDir}product-defaults/  $baseDir || {
	echo "Could not put product defaults in place."
	exit 1
}

# then we coverwrite that with the real product specific files:

cp -r ${baseDir}products/$1/  $baseDir || {
	echo "Could not put product assets in place."
	exit 1
}

# Renaming package:
tmpFile=/tmp/out.tmp.$$
stdPck="com.qeevee.gq"

echo "Renaming package ..."

findFiles() {
	echo $(find $1 -type f \
		-not -name '*.class' \
		-not -name '*.png' \
      	-not -name '*.jpg' \
       	-not -name '*.gif' \
      	-not -name '*.mp3' \
      	-not -name '*.mp4' \
      	-not -name '*.3gp' \
      	-not -name '*.ogg' \
     	-not -name '*.zip' \
      	-not -name '*.jar' \
      	-not -name '*.DS_Store' \
      	-not -name '*.dex' \
      	-not -name '*.apk' \
      	-not -name '*.ap_' \
      	-not -name 'out.tmp.*' \
      	-not -path "*/script/*" \
      	-not -path "*/libs/*")
}

LC_CLANG=C

# cope with spaces in file names: 
#   therefore set IFS var to different value and back afterwards:
SAVEIFS=$IFS
IFS=$(echo -en "\b")
echo "Source files:"
for f in $(findFiles $baseDir) ; do
	echo $f;
	# sed "s/${stdPck}/${stdPck}.$1/g" $f > $tmpFile && mv $tmpFile $f
done

echo "Test files:"
for f in $(findFiles $testDir) ; do
	echo $f;
	# sed "s/${stdPck}/${stdPck}.$1/g" $f > $tmpFile && mv $tmpFile $f
done
IFS=$SAVEIFS
echo "Done."
echo "You are using" $1 "as product now."
